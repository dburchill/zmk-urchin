/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "keymap_italian.h"

// Layer definitions
#define BASE 0
#define RIG  1
#define LEF  2
#define BT   3
#define NPAD 4
#define FPAD 5

#define SYM 1
#define EXT 2
#define FNC 3
#define SYM2 4
#define ACCENT 5
#define SETTINGS 6
// -----------------

#define TAPPING_TERM 240
#define SHIFT_TAP_MS 180
#define QUICK_TAP_MS 150
#define SHORTCUT_MS  270
#define PRIOR_IDLE   150



/*                              34 KEY MATRIX / LAYOUT MAPPING

  ╭────────────────────┬────────────────────╮ ╭─────────────────────┬─────────────────────╮
  │  0   1   2   3   4 │  5   6   7   8   9 │ │ LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 │
  │ 10  11  12  13  14 │ 15  16  17  18  19 │ │ LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 │
  │ 20  21  22  23  24 │ 25  26  27  28  29 │ │ LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 │
  ╰───────╮     30  31 │ 32  33     ╭───────╯ ╰───────╮     LH1 LH0 │ RH0 RH1     ╭───────╯
          ╰────────────┴────────────╯                 ╰─────────────┴─────────────╯             
*/


#define COMBO(name, kp, pos)               \
combo_##name {                             \
    timeout-ms            = <30>;          \
    require-prior-idle-ms = <TAPPING_TERM>;\
    bindings              = <kp>;          \
    key-positions         = <pos>;         \
    layers                = <0 1>;         \
};


/ {

	combos {
        compatible = "zmk,combos";
		
        COMBO(combo_esfc, &kp ESC, 2 3)
        COMBO(combo_cut, &kp LG(X),20 21)
 		COMBO(combo_cpy, &kp LG(C), 21 22) 
        COMBO(combo_pst, &kp LG(V), 22 23)
        COMBO(combo_pst_wo, &kp LS(LG(V)), 22 24)
        COMBO(combo_pst_wok, &kp LA(LS(LG(V))),23 24)
 		COMBO(combo_app_chgr, &kp LG(SPACE),12 13)
        COMBO(combo_lasso, &kp LG(LC(LS(N4))), 11 12)
        COMBO(combo_return, &kp RETURN,32 29)
        COMBO(combo_bspc, &kp BSPC, 32 9)

        COMBO(combo_indt, &vs_idt, 6 7)
    };


ZMK_MACRO(vs_idt,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp LC(K) &kp LC(D)>;
    )

	conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

	keymap {
		compatible = "zmk,keymap";


		// Base alpha layer
		
        default_layer {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
        //│ Q (f pad)│  W       │  E       │  R       │  T       │   │  Y       │  U       │  I       │  O       │   P      │           
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│  A       │  S       │  D       │  F       │  G       │   │  H       │  J       │  K       │  L       │   ;      │            
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│  Z       │  X       │  C       │  V       │  B       │   │  N       │  M       │ , <      │ . >      │ /?(enter)│    
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯                          
        //                                 │ left/TAB │  SPACE   │   │   SHIFT  │right/bspc│ 
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
        
         &lt FPAD Q   &kp W      &kp E      &kp R      &kp T             &kp Y      &kp U      &kp I      &kp O      &kp P
         HRML(A,        S,         D,          F)      &kp G             &kp H      HRMR(J,        K,         L,        SEMI)
         &mt LSHFT Z  &kp X      &kp C      &kp V      &kp B             &kp N      &kp M      &kp COMMA  &kp DOT    &kp FSLH
                                     &lt LEF TAB     &lt NPAD SPACE    &kp RSHFT  &lt RIG BSPC

            >;
        };

		right_layer {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
        //│    [     │    {     │    (     │     4    │     5    │   │   BSPC   │  BSPC    │     )    │    }     │     ]    │
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│      !   │    @     │   #      │    $     │    %     │   │   left   │  down    │    up    │  right   │   ;      │
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│ CAP word │    `~    │    ^     │    &     │    *     │   │   HOME   │ PG DN    │   PG UP  │   END    │ CAP word │
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
        //                                 │          │          │   │          │          │ 
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
        
        &kp LBKT     &kp LBRC    &kp LPAR    &kp N4     &kp N5         &kp BSPC    &kp BSPC   &kp RPAR   &kp RBRC   &kp RBKT
        &kp EXCL     &kp AT      &kp HASH    &kp DLLR   &kp PRCNT      &kp LEFT    &kp DOWN   &kp UP     &kp RIGHT  &kp SEMI
        &caps_word   &kp GRAVE   &kp CARET   &kp AMPS   &kp ASTRK      &kp HOME    &kp PG_DN  &kp PG_UP  &kp END    &caps_word
                                             &trans     &trans         &trans      &trans
            >;
        };

		// Main modifiers and arrow keys
		ext_layer {
			label = "Mods";
			bindings = <
			&kp ESC  &kp C_PREV &kp C_PP  &kp C_NEXT  &kp C_PAUSE    	&kp PG_UP  &kp HOME &kp UP &kp END &kp CAPS
			&sk LALT &sk LGUI  &sk LSHIFT  &sk LCTRL  &kp RALT 			&kp PG_DN &kp LEFT  &kp DOWN  &kp RIGHT   &kp DEL
			&kp LC(Z)  &kp LC(X) &kp LC(C) &kp TAB   &kp LC(V)          &kp LC(BSPC) &kp BSPC &trans &trans  &trans
																		&trans &kp LCTRL    &kp ENTER  &mo FNC 
			>;
		};

		// Function keys with modifiers
		fnc_layer {
			label = "FRow";
			bindings = <
			&kp F1 &kp F2 &kp F3 &kp F4 &kp F5                  &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 
			&sk LALT &sk LGUI &sk LSHIFT &sk LCTRL &kp RALT     &kp F11 &kp F12  &kp PRINTSCREEN &trans &trans
			&none &none &none &none &none				          &none &none &none &none &none 
							  &none &none              &none &none  
			>;
		};

		// Low frequency symbols.
		symbols_2_layer {
			label = "Sym.2";
			bindings = <
			&kp IT_CARET &kp IT_UNDER &kp IT_PND &kp IT_EUR &kp IT_HASH         &none &none &none &none &none 
			&kp IT_BKTK &kp IT_TILDE &kp IT_BSLH &kp IT_PIPE &kp IT_AND         &none &none &none &none &none
			&none 			&none 			 &kp IT_SECT &kp IT_CCED &kp IT_DEG				  &none &none &none &none &none
																	&none &none        	&none &none 
			>;
		};

		// Used to type regional accents.
		accent_layer {
			label = "Accent";
			bindings = <
			&none &none &none &kp IT_CEGR &none                         &none &none &none &none &none 
			&kp IT_AGRV &kp IT_IGRV &kp IT_OGRV &kp IT_EGRV &kp IT_EACU &none &none &none &none &none
			&none &none &none &kp IT_UGRV &none                         &none &none &none &none &none
									&none &none                         &none &none 
			>;
		};

		// Used to change the keyboard's settings.
		settings_layer {
				label = "Sett.";
				bindings = <
				&bootloader &none &none &bt BT_CLR 	&bt BT_SEL 0         &bt BT_SEL 3 	&none &none 	&none &bootloader 
				&none   	&none &none &none      	&bt BT_SEL 1 		 &bt BT_SEL 4 	&none &none 	&none &none
				&none 		&none &none &none      	&bt BT_SEL 2         &bt BT_SEL 5 	&none &none 	&none &none
										&none 		&none                &none 			&none 
				>;
		};
	};
};
